# Android
# Build your Android project with Gradle.
# Add steps that test, sign, and distribute the APK, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/android

# A pipeline with no CI trigger
trigger: none

pr:
  - develop

pool:
  vmImage: 'macOS-latest'

variables:
  - group: 'Android Pipelines Variable Group' # variable group
  - name: SourceCompleteBranchName
    value: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
    
steps:
  - checkout: self
    clean: ${{ parameters.clean }}
    
  - task: CmdLine@2
    displayName: Checkout $(SourceCompleteBranchName) branch
    inputs:
      script: |
        git checkout $(SourceCompleteBranchName)
      failOnStderr: false
      workingDirectory: ''

  - task: Cache@2
    displayName: Cache Homebrew packages
    inputs:
      key: '"Homebrew" | "$(Agent.OS)"'
      restoreKeys: |
         yarn | "$(Agent.OS)"
      path: $(HOMEBREW_CACHE_FOLDER)

  - task: Cache@2
    displayName: Cache Gems
    inputs:
      key: 'gems | "$(Agent.OS)" | Gemfile.lock | "v1"'
      restoreKeys: | 
        gems | "$(Agent.OS)"
        gems
      path: $(BUNDLE_PATH)
      
  - task: CmdLine@2
    displayName: Reveal secrets.
    inputs:
      script: |
        brew update
        brew install git-secret || true
        echo "$(GIT_SECRET_GPG_KEY)" | base64 --decode > ~/circleci_pkey_gpg_secret.asc
        gpg --import ~/circleci_pkey_gpg_secret.asc
        git-secret reveal || true
      failOnStderr: false
      workingDirectory: ''

  - task: CmdLine@2
    displayName: Check that PNGs are optimized.
    inputs:
      script: |
        sudo gem install tiny_png_checker
        tiny_png_checker check --folders app/src/
      failOnStderr: false
      workingDirectory: ''

  - task: CmdLine@2
    displayName: Check Code Style
    inputs:
      script: |
        java -jar checkstyle-8.12-all.jar -c app/config/checkstyle/checkstyle.xml app/src/main
      failOnStderr: false
      workingDirectory: ''

  - task: CmdLine@2
    displayName: Setup BRU Lint Baselines
    inputs:
      script: |
        cp app/lint-baseline-bru-dev.xml app/lint-baseline.xml
      failOnStderr: true
      workingDirectory: ''

  - task: Gradle@2
    displayName: Run BRU linterns
    inputs:
      workingDirectory: ''
      gradleWrapperFile: 'gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: false
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'ktlintBru_brandBruDevServerDebugCheck lintBru_brandBruDevServerDebug'

  - task: CmdLine@2
    displayName: Setup EBB Lint Baselines
    inputs:
      script: |
        cp app/lint-baseline-ebb-dev.xml app/lint-baseline.xml
      failOnStderr: false
      workingDirectory: ''

  - task: Gradle@2
    displayName: Run EBB linterns
    inputs:
      workingDirectory: ''
      gradleWrapperFile: 'gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: false
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'ktlintEbb_brandEbbDevServerDebugCheck lintEbb_brandEbbDevServerDebug '

  - task: CmdLine@2
    displayName: Setup NNYB Lint Baselines
    inputs:
      script: |
        cp app/lint-baseline-nnyb-dev.xml app/lint-baseline.xml
      failOnStderr: false
      workingDirectory: ''

  - task: Gradle@2
    displayName: Run NNYB linterns
    inputs:
      workingDirectory: ''
      gradleWrapperFile: 'gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: false
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'ktlintNnyb_brandNnybDevServerDebugCheck lintNnyb_brandNnybDevServerDebug '

  - task: Gradle@2
    displayName: Run Tests
    inputs:
      workingDirectory: ''
      gradleWrapperFile: 'gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'test'

